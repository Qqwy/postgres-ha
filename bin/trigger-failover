#!/bin/bash

export $(cat /data/.env | xargs)

# Identify node holding master
node_id=$(stolonctl clusterdata read | jq '.cluster.status.master')

# Resolve nodes that are eligible to take on leadership.
query=".dbs.$node_id.spec.keeperUID"
keeper_uid=$(stolonctl clusterdata read | jq $query | tr -d '"')
eligible_nodes=$(stolonctl clusterdata read | jq ".keepers | .[].status.canBeMaster");

eligible_count=0
for node in $eligible_nodes
do
    if [ "$node" = "true" ] ; then
        ((eligible_count+=1))
    fi
done

# Verify that there's at least one eligible Keeper.
if (( $eligible_count > 1 )) ; then
    stolonctl failkeeper $keeper_uid
else
    echo '{"status": "failed", "data":{"ok": false, "error": "No eligible keepers available to accommodate failover."}}'
    exit 1
fi

for i in $(seq 1 20)
do
    # Resolve the UUID of the Keeper holding master.
    id=$(stolonctl clusterdata read | jq '.cluster.status.master')
    query=".dbs.$id.spec.keeperUID"
    uuid=$(stolonctl clusterdata read | jq $query | tr -d '"')
    
    # Confirm that the Master Keeper has changed.
    if [ -n "$uuid" ] && [ "$uuid" != "null" ] && [ "$uuid" != "$keeper_uid" ]
    then
        echo '{"status": "success", "data":{"ok": true, "message": "Failover was successful"}}'
        exit 0
    fi
    sleep 1
done

echo '{"status": "failed", "data":{"ok": false, "error": "Failover was not successful"}}'
exit 1